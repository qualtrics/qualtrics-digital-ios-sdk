#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef QUALTRICS_SWIFT_H
#define QUALTRICS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Qualtrics",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class UIColor;
@class UIFont;

/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end.
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics11ButtonTheme")
@interface ButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end.
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param textColor text adaptive color
///
/// \param linkColor hyperlink adaptive  color
///
/// \param font text font
///
/// \param backgroundColor background adaptive color
///
/// \param borderColor button outline adaptive color
///
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor linkColor:(UIColor * _Nonnull)linkColor font:(UIFont * _Nonnull)font backgroundColor:(UIColor * _Nonnull)backgroundColor borderColor:(UIColor * _Nonnull)borderColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CreativeType, open) {
  CreativeTypeNotification = 0,
  CreativeTypePopOver = 1,
  CreativeTypeEmbeddedFeedback = 2,
};

@class FollowupQuestionTheme;
@class ThumbButtonTheme;
@class YesNoButtonTheme;
@class StarButtonTheme;
@class EmojiButtonTheme;
@class SubmitButtonTheme;
@class MultipleChoiceTheme;

/// Determines the Embedded App Feedback intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics24EmbeddedAppFeedbackTheme")
@interface EmbeddedAppFeedbackTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     ([see more]
///     (https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897))
///   </li>
/// </ul>
/// <hr/>
/// \param dialogBackgroundColor Creative background adaptive color
///
/// \param dialogShadowColor Creative shadow adaptive color
///
/// \param closeButtonColor Close button adaptive color
///
/// \param initialQuestionColor Initial question adaptive color
///
/// \param initialQuestionFont Initial question font
///
/// \param thankYouTextColor Thank you message adaptive color
///
/// \param thankYouTextFont Thank you message font
///
/// \param followupQuestionTheme Followup question theme
///
/// \param thumbsButtonsTheme Thumbs up / down type theme
///
/// \param yesNoButtonsTheme Yes / no type theme
///
/// \param starTheme Rating with stars type theme
///
/// \param emojiTheme Rating with emojis type theme
///
/// \param submitButtonTheme Submit button theme
///
/// \param multipleChoiceTheme Multiple choice question theme
///
- (nonnull instancetype)initWithDialogBackgroundColor:(UIColor * _Nonnull)dialogBackgroundColor dialogShadowColor:(UIColor * _Nonnull)dialogShadowColor closeButtonColor:(UIColor * _Nonnull)closeButtonColor initialQuestionColor:(UIColor * _Nonnull)initialQuestionColor initialQuestionFont:(UIFont * _Nonnull)initialQuestionFont thankYouTextColor:(UIColor * _Nonnull)thankYouTextColor thankYouTextFont:(UIFont * _Nonnull)thankYouTextFont followupQuestionTheme:(FollowupQuestionTheme * _Nonnull)followupQuestionTheme thumbsButtonsTheme:(ThumbButtonTheme * _Nonnull)thumbsButtonsTheme yesNoButtonsTheme:(YesNoButtonTheme * _Nonnull)yesNoButtonsTheme starTheme:(StarButtonTheme * _Nonnull)starTheme emojiTheme:(EmojiButtonTheme * _Nonnull)emojiTheme submitButtonTheme:(SubmitButtonTheme * _Nonnull)submitButtonTheme multipleChoiceTheme:(MultipleChoiceTheme * _Nonnull)multipleChoiceTheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Determines the Embedded App Feedback intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics16EmojiButtonTheme")
@interface EmojiButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param backgroundColor Emoji background adaptive color
///
/// \param borderColor Emoji outline adaptive color
///
/// \param tintColor Emoji adaptive color
///
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor borderColor:(UIColor * _Nonnull)borderColor tintColor:(UIColor * _Nonnull)tintColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics21FollowupQuestionTheme")
@interface FollowupQuestionTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param color question text adaptive color
///
/// \param font question font
///
/// \param textInputColor Input field text adaptive color
///
/// \param textInputFont Input field text font
///
/// \param textInputBackgroundcolor text input background adaptive color
///
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color font:(UIFont * _Nonnull)font textInputColor:(UIColor * _Nonnull)textInputColor textInputFont:(UIFont * _Nonnull)textInputFont textInputBackgroundcolor:(UIColor * _Nonnull)textInputBackgroundcolor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;

SWIFT_CLASS("_TtC9Qualtrics20InitializationResult")
@interface InitializationResult : NSObject
- (NSString * _Nullable)getMessage SWIFT_WARN_UNUSED_RESULT;
- (BOOL)passed SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Determines the Mobile App Promplt intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics20MobileAppPromptTheme")
@interface MobileAppPromptTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param backgroundColor creative background adaptive color
///
/// \param headlineTextColor titles, and headlines adaptive color
///
/// \param headlineFont titles, and headlines font.
///
/// \param descriptionTextColor additional texts adaptive color
///
/// \param descriptionFont description text font
///
/// \param closeButtonColor <em>close button</em> adaptive color
///
/// \param buttonOneTheme <em>ButtonTheme</em> main (left) button theme
///
/// \param buttonTwoTheme <em>ButtonTheme</em> secondary (right) button theme
///
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor headlineTextColor:(UIColor * _Nonnull)headlineTextColor headlineFont:(UIFont * _Nonnull)headlineFont descriptionTextColor:(UIColor * _Nonnull)descriptionTextColor descriptionFont:(UIFont * _Nonnull)descriptionFont closeButtonColor:(UIColor * _Nonnull)closeButtonColor buttonOneTheme:(ButtonTheme * _Nonnull)buttonOneTheme buttonTwoTheme:(ButtonTheme * _Nonnull)buttonTwoTheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RadioButtonTheme;

/// Determines the Embedded App Feedback intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics19MultipleChoiceTheme")
@interface MultipleChoiceTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param questionTextColor Question text adaptive color for multiple choice question
///
/// \param questionTextFont Question text font for multiple choice question
///
/// \param otherOptionTextColor Text adaptive color for <code>other</code> option in multiple choice question
///
/// \param otherAnswerTextFont Text font for <code>other</code> option in multiple choice question
///
/// \param otherAnswerBackgroundColor Text box background adaptive color for <code>other</code> option in multiple choice question
///
/// \param radioButtonsTheme Theme for radiobuttons
///
- (nonnull instancetype)initWithQuestionTextColor:(UIColor * _Nonnull)questionTextColor questionTextFont:(UIFont * _Nonnull)questionTextFont otherAnswerTextColor:(UIColor * _Nonnull)otherAnswerTextColor otherAnswetTextFont:(UIFont * _Nonnull)otherAnswetTextFont otherAnswerBackgroundColor:(UIColor * _Nonnull)otherAnswerBackgroundColor radioButtonsTheme:(RadioButtonTheme * _Nonnull)radioButtonsTheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class QualtricsProperties;
@class QualtricsWebviewTheme;
@class QualtricsTheme;
@class TargetingResult;
@class UNNotificationResponse;
@class UIViewController;
@class UILocalNotification;
@class NSNumber;

SWIFT_CLASS("_TtC9Qualtrics9Qualtrics")
@interface Qualtrics : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Qualtrics * _Nonnull shared;)
+ (Qualtrics * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) QualtricsProperties * _Nonnull properties;
@property (nonatomic, strong) QualtricsWebviewTheme * _Nonnull webviewTheme;
/// Overrides the intercepts theming (colors + fonts) if the “Overriden Through SDK” option is turned on.
@property (nonatomic, strong) QualtricsTheme * _Nonnull qualtricsTheme;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeWithBrandId:(NSString * _Nonnull)brandId zoneId:(NSString * _Nonnull)zoneId interceptId:(NSString * _Nonnull)interceptId completion:(void (^ _Nullable)(InitializationResult * _Nonnull))completion SWIFT_DEPRECATED_MSG("This is being removed; please migrate to initializeProject.");
- (void)initializeProjectWithBrandId:(NSString * _Nonnull)brandId projectId:(NSString * _Nonnull)projectId extRefId:(NSString * _Nullable)extRefId completion:(void (^ _Nullable)(NSDictionary<NSString *, InitializationResult *> * _Nonnull))completion;
- (void)evaluateTargetingLogicWithCompletion:(void (^ _Nonnull)(TargetingResult * _Nonnull))completion SWIFT_DEPRECATED_MSG("This is being removed; please migrate to evaluateProject or evaluateIntercept.");
- (void)evaluateProjectWithCompletion:(void (^ _Nonnull)(NSDictionary<NSString *, TargetingResult *> * _Nonnull))completion;
- (void)evaluateInterceptFor:(NSString * _Nonnull)interceptId completion:(void (^ _Nonnull)(TargetingResult * _Nonnull))completion;
- (BOOL)handleLocalNotificationWithResponse:(UNNotificationResponse * _Nonnull)response displayOn:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (BOOL)handleLocalNotification:(UILocalNotification * _Nonnull)notification displayOn:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (BOOL)displayWithViewController:(UIViewController * _Nonnull)viewController autoCloseSurvey:(NSNumber * _Nonnull)autoCloseSurvey SWIFT_WARN_UNUSED_RESULT;
- (BOOL)displayInterceptFor:(NSString * _Nonnull)interceptID viewController:(UIViewController * _Nonnull)viewController autoCloseSurvey:(NSNumber * _Nonnull)autoCloseSurvey SWIFT_WARN_UNUSED_RESULT;
- (void)displayTargetWithTargetViewController:(UIViewController * _Nonnull)targetViewController targetUrl:(NSString * _Nonnull)targetUrl autoCloseSurvey:(NSNumber * _Nonnull)autoCloseSurvey;
- (NSArray<NSString *> * _Nonnull)getInitializedIntercepts SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getPassingIntercepts SWIFT_WARN_UNUSED_RESULT;
- (void)setEmbeddedFeedbackDialogCloseListenerWithListener:(void (^ _Nullable)(void))listener;
- (BOOL)hide SWIFT_WARN_UNUSED_RESULT;
- (void)registerViewVisitWithViewName:(NSString * _Nonnull)viewName;
- (void)resetTimer;
- (void)resetViewCounter;
/// Returns the q_touchpoint value for the given intercept
/// If the given intercept has not been initialized and evaluated, this function will return a nil value.
- (NSString * _Nullable)getQualtricsContactIdWithInterceptId:(NSString * _Nonnull)interceptId SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Parameters : <em>QualtricsCreativeTheme</em>: the new theme shared across the intercepts.
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
- (void)setCreativeThemeTo:(QualtricsTheme * _Nonnull)qualtricsTheme;
@end


SWIFT_CLASS("_TtC9Qualtrics19QualtricsProperties")
@interface QualtricsProperties : NSObject
- (void)setStringWithString:(NSString * _Nonnull)string for:(NSString * _Nonnull)key;
- (void)setNumberWithNumber:(double)number for:(NSString * _Nonnull)key;
- (void)setDateTimeFor:(NSString * _Nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;
@class WKWebView;
@class WKWebViewConfiguration;
@class WKNavigationAction;
@class WKWindowFeatures;
@protocol UIViewControllerTransitionCoordinator;
@class WKUserContentController;
@class WKScriptMessage;
@class NSBundle;

SWIFT_CLASS("_TtC9Qualtrics29QualtricsSurveyViewController")
@interface QualtricsSurveyViewController : UIViewController <WKScriptMessageHandler, WKUIDelegate>
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url autoCloseSurvey:(NSNumber * _Nullable)autoCloseSurvey OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (WKWebView * _Nullable)webView:(WKWebView * _Nonnull)webView createWebViewWithConfiguration:(WKWebViewConfiguration * _Nonnull)configuration forNavigationAction:(WKNavigationAction * _Nonnull)navigationAction windowFeatures:(WKWindowFeatures * _Nonnull)windowFeatures SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Determines the intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics14QualtricsTheme")
@interface QualtricsTheme : NSObject
/// Enables theming customization for Mobile  App Prompt Creatives.
@property (nonatomic, strong) MobileAppPromptTheme * _Nonnull mobileAppPromptTheme;
/// Enables theming customization for Embedded App Feedback Creatives.
@property (nonatomic, strong) EmbeddedAppFeedbackTheme * _Nonnull embeddedAppFeedbackTheme;
/// <ul>
///   <li>
///     <em>Defaults</em>:
///     If not set explicitly, the values are filled with Qualtrics Default Theme.
///   </li>
/// </ul>
/// \param mobileAppPromptTheme <em>MobileAppPromptTheme</em> for Mobile Prompt Creatives.
///
/// \param embeddedAppFeedbackTheme <em>EmbeddedAppFeedbackTheme</em> for Embedded App Feedback Creatives.
///
- (nonnull instancetype)initWithMobileAppPromptTheme:(MobileAppPromptTheme * _Nonnull)mobileAppPromptTheme embeddedAppFeedbackTheme:(EmbeddedAppFeedbackTheme * _Nonnull)embeddedAppFeedbackTheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9Qualtrics21QualtricsWebviewTheme")
@interface QualtricsWebviewTheme : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Determines the Embedded App Feedback intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics16RadioButtonTheme")
@interface RadioButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param textColor radiobutton option text adaptive color
///
/// \param font radiobutton option text font
///
/// \param borderColor radioburron option border adaptive color
///
/// \param selectedBorderColor selected radiobutton option border adaptive color
///
/// \param backgroundColor icon background adaptive color for unselected option
///
/// \param selectedBackgroundColor selected radiobutton option background adaptive color
///
/// \param fillColor icon fill adaptive color for unselected option
///
/// \param selectedFillColor selected radiobutton option tint adaptive color
///
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor font:(UIFont * _Nonnull)font borderColor:(UIColor * _Nonnull)borderColor selectedBorderColor:(UIColor * _Nonnull)selectedBorderColor backgroundColor:(UIColor * _Nonnull)backgroundColor selectedBackgroundColor:(UIColor * _Nonnull)selectedBackgroundColor fillColor:(UIColor * _Nonnull)fillColor selectedFillColor:(UIColor * _Nonnull)selectedFillColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics15StarButtonTheme")
@interface StarButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param backgroundColor Star background adaptive color
///
/// \param tintColor Star outline adaptive color
///
/// \param pressedTintColor Adaptive color of the star in pressed state
///
/// \param pressedBackgroundColor Adaptive color of the star background in pressed state
///
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor tintColor:(UIColor * _Nonnull)tintColor pressedTintColor:(UIColor * _Nonnull)pressedTintColor pressedBackgroundColor:(UIColor * _Nonnull)pressedBackgroundColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Determines the Embedded App Feedback intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics17SubmitButtonTheme")
@interface SubmitButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param textColor Button text adaptive color
///
/// \param font Button text font
///
/// \param fillColor Button background adaptive color
///
/// \param separatorColor Separator fill adaptive color
///
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor font:(UIFont * _Nonnull)font fillColor:(UIColor * _Nonnull)fillColor separatorColor:(UIColor * _Nonnull)separatorColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum targetingResultStatus : NSInteger;
@class TargetingResultError;

SWIFT_CLASS("_TtC9Qualtrics15TargetingResult")
@interface TargetingResult : NSObject
- (NSString * _Nullable)getSurveyUrl SWIFT_WARN_UNUSED_RESULT;
- (enum targetingResultStatus)getTargetingResult SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getCreativeType SWIFT_WARN_UNUSED_RESULT;
- (void)setLastDisplayedTime;
- (BOOL)passed SWIFT_WARN_UNUSED_RESULT;
- (TargetingResultError * _Nullable)getError SWIFT_WARN_UNUSED_RESULT;
- (void)recordImpression;
- (void)recordClick;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9Qualtrics20TargetingResultError")
@interface TargetingResultError : NSObject
- (NSString * _Nonnull)getErrorMessage SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getErrorType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics16ThumbButtonTheme")
@interface ThumbButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param thumbUpColor thumb up icon adaptive color
///
/// \param thumbUpBackground thumb up incon background adaptive color
///
/// \param thumbDownColor thumb down icon adaptive color
///
/// \param thumbDownBackground thumb down incon background adaptive color
///
/// \param pressedThumbColor adaptive color of icon in pressed state
///
/// \param pressedThumbBackground adaptive color of icon background in pressed state
///
- (nonnull instancetype)initWithThumbUpColor:(UIColor * _Nonnull)thumbUpColor thumbUpBackground:(UIColor * _Nonnull)thumbUpBackground thumbDownColor:(UIColor * _Nonnull)thumbDownColor thumbDownBackground:(UIColor * _Nonnull)thumbDownBackground pressedThumbColor:(UIColor * _Nonnull)pressedThumbColor pressedThumbBackground:(UIColor * _Nonnull)pressedThumbBackground OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics16YesNoButtonTheme")
@interface YesNoButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param yesButtonTitleColor Yes button text adaptive color
///
/// \param yesButtonFont Yes button text font
///
/// \param yesButtonBackgroundColor Yes button background adaptive color
///
/// \param yesButtonBorderColor Yes button border  adaptive color
///
/// \param noButtonTitleColor No button text adaptive color
///
/// \param noButtonFont No button text font
///
/// \param noButtonBackgroundColor No button background adaptive color
///
/// \param noButtonBorderColor No button border adaptive color
///
/// \param pressedButtonColor Adaptive color of icon in pressed state
///
/// \param pressedButtonBackground Adaptive color of icon background in pressed state
///
- (nonnull instancetype)initWithYesButtonTitleColor:(UIColor * _Nonnull)yesButtonTitleColor yesButtonFont:(UIFont * _Nonnull)yesButtonFont yesButtonBackgroundColor:(UIColor * _Nonnull)yesButtonBackgroundColor yesButtonBorderColor:(UIColor * _Nonnull)yesButtonBorderColor noButtonTitleColor:(UIColor * _Nonnull)noButtonTitleColor noButtonFont:(UIFont * _Nonnull)noButtonFont noButtonBackgroundColor:(UIColor * _Nonnull)noButtonBackgroundColor noButtonBorderColor:(UIColor * _Nonnull)noButtonBorderColor pressedButtonColor:(UIColor * _Nonnull)pressedButtonColor pressedButtonBackground:(UIColor * _Nonnull)pressedButtonBackground OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, targetingResultStatus, open) {
  targetingResultStatusPassed = 0,
  targetingResultStatusFailedLogic = 1,
  targetingResultStatusSampledOut = 2,
  targetingResultStatusMultipleDisplayPrevented = 3,
  targetingResultStatusError = 4,
  targetingResultStatusInactive = 5,
  targetingResultStatusContactFrequencyFailed = 6,
};

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef QUALTRICS_SWIFT_H
#define QUALTRICS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Qualtrics",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class UIColor;
@class UIFont;

/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end.
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics11ButtonTheme")
@interface ButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end.
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param textColor text adaptive color
///
/// \param linkColor hyperlink adaptive  color
///
/// \param font text font
///
/// \param backgroundColor background adaptive color
///
/// \param borderColor button outline adaptive color
///
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor linkColor:(UIColor * _Nonnull)linkColor font:(UIFont * _Nonnull)font backgroundColor:(UIColor * _Nonnull)backgroundColor borderColor:(UIColor * _Nonnull)borderColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CreativeType, open) {
  CreativeTypeNotification = 0,
  CreativeTypePopOver = 1,
  CreativeTypeEmbeddedFeedback = 2,
};

@class FollowupQuestionTheme;
@class ThumbButtonTheme;
@class YesNoButtonTheme;
@class StarButtonTheme;
@class EmojiButtonTheme;
@class SubmitButtonTheme;
@class MultipleChoiceTheme;

/// Determines the Embedded App Feedback intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics24EmbeddedAppFeedbackTheme")
@interface EmbeddedAppFeedbackTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     ([see more]
///     (https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897))
///   </li>
/// </ul>
/// <hr/>
/// \param dialogBackgroundColor Creative background adaptive color
///
/// \param dialogShadowColor Creative shadow adaptive color
///
/// \param closeButtonColor Close button adaptive color
///
/// \param initialQuestionColor Initial question adaptive color
///
/// \param initialQuestionFont Initial question font
///
/// \param thankYouTextColor Thank you message adaptive color
///
/// \param thankYouTextFont Thank you message font
///
/// \param followupQuestionTheme Followup question theme
///
/// \param thumbsButtonsTheme Thumbs up / down type theme
///
/// \param yesNoButtonsTheme Yes / no type theme
///
/// \param starTheme Rating with stars type theme
///
/// \param emojiTheme Rating with emojis type theme
///
/// \param submitButtonTheme Submit button theme
///
/// \param multipleChoiceTheme Multiple choice question theme
///
- (nonnull instancetype)initWithDialogBackgroundColor:(UIColor * _Nonnull)dialogBackgroundColor dialogShadowColor:(UIColor * _Nonnull)dialogShadowColor closeButtonColor:(UIColor * _Nonnull)closeButtonColor initialQuestionColor:(UIColor * _Nonnull)initialQuestionColor initialQuestionFont:(UIFont * _Nonnull)initialQuestionFont thankYouTextColor:(UIColor * _Nonnull)thankYouTextColor thankYouTextFont:(UIFont * _Nonnull)thankYouTextFont followupQuestionTheme:(FollowupQuestionTheme * _Nonnull)followupQuestionTheme thumbsButtonsTheme:(ThumbButtonTheme * _Nonnull)thumbsButtonsTheme yesNoButtonsTheme:(YesNoButtonTheme * _Nonnull)yesNoButtonsTheme starTheme:(StarButtonTheme * _Nonnull)starTheme emojiTheme:(EmojiButtonTheme * _Nonnull)emojiTheme submitButtonTheme:(SubmitButtonTheme * _Nonnull)submitButtonTheme multipleChoiceTheme:(MultipleChoiceTheme * _Nonnull)multipleChoiceTheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Determines the Embedded App Feedback intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics16EmojiButtonTheme")
@interface EmojiButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param backgroundColor Emoji background adaptive color
///
/// \param borderColor Emoji outline adaptive color
///
/// \param tintColor Emoji adaptive color
///
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor borderColor:(UIColor * _Nonnull)borderColor tintColor:(UIColor * _Nonnull)tintColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics21FollowupQuestionTheme")
@interface FollowupQuestionTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param color question text adaptive color
///
/// \param font question font
///
/// \param textInputColor Input field text adaptive color
///
/// \param textInputFont Input field text font
///
/// \param textInputBackgroundcolor text input background adaptive color
///
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color font:(UIFont * _Nonnull)font textInputColor:(UIColor * _Nonnull)textInputColor textInputFont:(UIFont * _Nonnull)textInputFont textInputBackgroundcolor:(UIColor * _Nonnull)textInputBackgroundcolor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;

SWIFT_CLASS("_TtC9Qualtrics20InitializationResult")
@interface InitializationResult : NSObject
- (NSString * _Nullable)getMessage SWIFT_WARN_UNUSED_RESULT;
- (BOOL)passed SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Determines the Mobile App Promplt intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics20MobileAppPromptTheme")
@interface MobileAppPromptTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param backgroundColor creative background adaptive color
///
/// \param headlineTextColor titles, and headlines adaptive color
///
/// \param headlineFont titles, and headlines font.
///
/// \param descriptionTextColor additional texts adaptive color
///
/// \param descriptionFont description text font
///
/// \param closeButtonColor <em>close button</em> adaptive color
///
/// \param buttonOneTheme <em>ButtonTheme</em> main (left) button theme
///
/// \param buttonTwoTheme <em>ButtonTheme</em> secondary (right) button theme
///
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor headlineTextColor:(UIColor * _Nonnull)headlineTextColor headlineFont:(UIFont * _Nonnull)headlineFont descriptionTextColor:(UIColor * _Nonnull)descriptionTextColor descriptionFont:(UIFont * _Nonnull)descriptionFont closeButtonColor:(UIColor * _Nonnull)closeButtonColor buttonOneTheme:(ButtonTheme * _Nonnull)buttonOneTheme buttonTwoTheme:(ButtonTheme * _Nonnull)buttonTwoTheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RadioButtonTheme;

/// Determines the Embedded App Feedback intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics19MultipleChoiceTheme")
@interface MultipleChoiceTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param questionTextColor Question text adaptive color for multiple choice question
///
/// \param questionTextFont Question text font for multiple choice question
///
/// \param otherOptionTextColor Text adaptive color for <code>other</code> option in multiple choice question
///
/// \param otherAnswerTextFont Text font for <code>other</code> option in multiple choice question
///
/// \param otherAnswerBackgroundColor Text box background adaptive color for <code>other</code> option in multiple choice question
///
/// \param radioButtonsTheme Theme for radiobuttons
///
- (nonnull instancetype)initWithQuestionTextColor:(UIColor * _Nonnull)questionTextColor questionTextFont:(UIFont * _Nonnull)questionTextFont otherAnswerTextColor:(UIColor * _Nonnull)otherAnswerTextColor otherAnswetTextFont:(UIFont * _Nonnull)otherAnswetTextFont otherAnswerBackgroundColor:(UIColor * _Nonnull)otherAnswerBackgroundColor radioButtonsTheme:(RadioButtonTheme * _Nonnull)radioButtonsTheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class QualtricsProperties;
@class QualtricsWebviewTheme;
@class QualtricsTheme;
@class TargetingResult;
@class UNNotificationResponse;
@class UIViewController;
@class UILocalNotification;
@class NSNumber;

SWIFT_CLASS("_TtC9Qualtrics9Qualtrics")
@interface Qualtrics : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Qualtrics * _Nonnull shared;)
+ (Qualtrics * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) QualtricsProperties * _Nonnull properties;
@property (nonatomic, strong) QualtricsWebviewTheme * _Nonnull webviewTheme;
/// Overrides the intercepts theming (colors + fonts) if the “Overriden Through SDK” option is turned on.
@property (nonatomic, strong) QualtricsTheme * _Nonnull qualtricsTheme;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeWithBrandId:(NSString * _Nonnull)brandId zoneId:(NSString * _Nonnull)zoneId interceptId:(NSString * _Nonnull)interceptId completion:(void (^ _Nullable)(InitializationResult * _Nonnull))completion SWIFT_DEPRECATED_MSG("This is being removed; please migrate to initializeProject.");
- (void)initializeProjectWithBrandId:(NSString * _Nonnull)brandId projectId:(NSString * _Nonnull)projectId extRefId:(NSString * _Nullable)extRefId completion:(void (^ _Nullable)(NSDictionary<NSString *, InitializationResult *> * _Nonnull))completion;
- (void)evaluateTargetingLogicWithCompletion:(void (^ _Nonnull)(TargetingResult * _Nonnull))completion SWIFT_DEPRECATED_MSG("This is being removed; please migrate to evaluateProject or evaluateIntercept.");
- (void)evaluateProjectWithCompletion:(void (^ _Nonnull)(NSDictionary<NSString *, TargetingResult *> * _Nonnull))completion;
- (void)evaluateInterceptFor:(NSString * _Nonnull)interceptId completion:(void (^ _Nonnull)(TargetingResult * _Nonnull))completion;
- (BOOL)handleLocalNotificationWithResponse:(UNNotificationResponse * _Nonnull)response displayOn:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (BOOL)handleLocalNotification:(UILocalNotification * _Nonnull)notification displayOn:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (BOOL)displayWithViewController:(UIViewController * _Nonnull)viewController autoCloseSurvey:(NSNumber * _Nonnull)autoCloseSurvey SWIFT_WARN_UNUSED_RESULT;
- (BOOL)displayInterceptFor:(NSString * _Nonnull)interceptID viewController:(UIViewController * _Nonnull)viewController autoCloseSurvey:(NSNumber * _Nonnull)autoCloseSurvey SWIFT_WARN_UNUSED_RESULT;
- (void)displayTargetWithTargetViewController:(UIViewController * _Nonnull)targetViewController targetUrl:(NSString * _Nonnull)targetUrl autoCloseSurvey:(NSNumber * _Nonnull)autoCloseSurvey;
- (NSArray<NSString *> * _Nonnull)getInitializedIntercepts SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getPassingIntercepts SWIFT_WARN_UNUSED_RESULT;
- (void)setEmbeddedFeedbackDialogCloseListenerWithListener:(void (^ _Nullable)(void))listener;
- (BOOL)hide SWIFT_WARN_UNUSED_RESULT;
- (void)registerViewVisitWithViewName:(NSString * _Nonnull)viewName;
- (void)resetTimer;
- (void)resetViewCounter;
/// Returns the q_touchpoint value for the given intercept
/// If the given intercept has not been initialized and evaluated, this function will return a nil value.
- (NSString * _Nullable)getQualtricsContactIdWithInterceptId:(NSString * _Nonnull)interceptId SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Parameters : <em>QualtricsCreativeTheme</em>: the new theme shared across the intercepts.
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
- (void)setCreativeThemeTo:(QualtricsTheme * _Nonnull)qualtricsTheme;
@end


SWIFT_CLASS("_TtC9Qualtrics19QualtricsProperties")
@interface QualtricsProperties : NSObject
- (void)setStringWithString:(NSString * _Nonnull)string for:(NSString * _Nonnull)key;
- (void)setNumberWithNumber:(double)number for:(NSString * _Nonnull)key;
- (void)setDateTimeFor:(NSString * _Nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;
@class WKWebView;
@class WKWebViewConfiguration;
@class WKNavigationAction;
@class WKWindowFeatures;
@protocol UIViewControllerTransitionCoordinator;
@class WKUserContentController;
@class WKScriptMessage;
@class NSBundle;

SWIFT_CLASS("_TtC9Qualtrics29QualtricsSurveyViewController")
@interface QualtricsSurveyViewController : UIViewController <WKScriptMessageHandler, WKUIDelegate>
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url autoCloseSurvey:(NSNumber * _Nullable)autoCloseSurvey OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (WKWebView * _Nullable)webView:(WKWebView * _Nonnull)webView createWebViewWithConfiguration:(WKWebViewConfiguration * _Nonnull)configuration forNavigationAction:(WKNavigationAction * _Nonnull)navigationAction windowFeatures:(WKWindowFeatures * _Nonnull)windowFeatures SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Determines the intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics14QualtricsTheme")
@interface QualtricsTheme : NSObject
/// Enables theming customization for Mobile  App Prompt Creatives.
@property (nonatomic, strong) MobileAppPromptTheme * _Nonnull mobileAppPromptTheme;
/// Enables theming customization for Embedded App Feedback Creatives.
@property (nonatomic, strong) EmbeddedAppFeedbackTheme * _Nonnull embeddedAppFeedbackTheme;
/// <ul>
///   <li>
///     <em>Defaults</em>:
///     If not set explicitly, the values are filled with Qualtrics Default Theme.
///   </li>
/// </ul>
/// \param mobileAppPromptTheme <em>MobileAppPromptTheme</em> for Mobile Prompt Creatives.
///
/// \param embeddedAppFeedbackTheme <em>EmbeddedAppFeedbackTheme</em> for Embedded App Feedback Creatives.
///
- (nonnull instancetype)initWithMobileAppPromptTheme:(MobileAppPromptTheme * _Nonnull)mobileAppPromptTheme embeddedAppFeedbackTheme:(EmbeddedAppFeedbackTheme * _Nonnull)embeddedAppFeedbackTheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9Qualtrics21QualtricsWebviewTheme")
@interface QualtricsWebviewTheme : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Determines the Embedded App Feedback intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics16RadioButtonTheme")
@interface RadioButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param textColor radiobutton option text adaptive color
///
/// \param font radiobutton option text font
///
/// \param borderColor radioburron option border adaptive color
///
/// \param selectedBorderColor selected radiobutton option border adaptive color
///
/// \param backgroundColor icon background adaptive color for unselected option
///
/// \param selectedBackgroundColor selected radiobutton option background adaptive color
///
/// \param fillColor icon fill adaptive color for unselected option
///
/// \param selectedFillColor selected radiobutton option tint adaptive color
///
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor font:(UIFont * _Nonnull)font borderColor:(UIColor * _Nonnull)borderColor selectedBorderColor:(UIColor * _Nonnull)selectedBorderColor backgroundColor:(UIColor * _Nonnull)backgroundColor selectedBackgroundColor:(UIColor * _Nonnull)selectedBackgroundColor fillColor:(UIColor * _Nonnull)fillColor selectedFillColor:(UIColor * _Nonnull)selectedFillColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics15StarButtonTheme")
@interface StarButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param backgroundColor Star background adaptive color
///
/// \param tintColor Star outline adaptive color
///
/// \param pressedTintColor Adaptive color of the star in pressed state
///
/// \param pressedBackgroundColor Adaptive color of the star background in pressed state
///
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor tintColor:(UIColor * _Nonnull)tintColor pressedTintColor:(UIColor * _Nonnull)pressedTintColor pressedBackgroundColor:(UIColor * _Nonnull)pressedBackgroundColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Determines the Embedded App Feedback intercepts theming.
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics17SubmitButtonTheme")
@interface SubmitButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param textColor Button text adaptive color
///
/// \param font Button text font
///
/// \param fillColor Button background adaptive color
///
/// \param separatorColor Separator fill adaptive color
///
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor font:(UIFont * _Nonnull)font fillColor:(UIColor * _Nonnull)fillColor separatorColor:(UIColor * _Nonnull)separatorColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum targetingResultStatus : NSInteger;
@class TargetingResultError;

SWIFT_CLASS("_TtC9Qualtrics15TargetingResult")
@interface TargetingResult : NSObject
- (NSString * _Nullable)getSurveyUrl SWIFT_WARN_UNUSED_RESULT;
- (enum targetingResultStatus)getTargetingResult SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getCreativeType SWIFT_WARN_UNUSED_RESULT;
- (void)setLastDisplayedTime;
- (BOOL)passed SWIFT_WARN_UNUSED_RESULT;
- (TargetingResultError * _Nullable)getError SWIFT_WARN_UNUSED_RESULT;
- (void)recordImpression;
- (void)recordClick;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9Qualtrics20TargetingResultError")
@interface TargetingResultError : NSObject
- (NSString * _Nonnull)getErrorMessage SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getErrorType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics16ThumbButtonTheme")
@interface ThumbButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param thumbUpColor thumb up icon adaptive color
///
/// \param thumbUpBackground thumb up incon background adaptive color
///
/// \param thumbDownColor thumb down icon adaptive color
///
/// \param thumbDownBackground thumb down incon background adaptive color
///
/// \param pressedThumbColor adaptive color of icon in pressed state
///
/// \param pressedThumbBackground adaptive color of icon background in pressed state
///
- (nonnull instancetype)initWithThumbUpColor:(UIColor * _Nonnull)thumbUpColor thumbUpBackground:(UIColor * _Nonnull)thumbUpBackground thumbDownColor:(UIColor * _Nonnull)thumbDownColor thumbDownBackground:(UIColor * _Nonnull)thumbDownBackground pressedThumbColor:(UIColor * _Nonnull)pressedThumbColor pressedThumbBackground:(UIColor * _Nonnull)pressedThumbBackground OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///   </li>
/// </ul>
/// To make colors respond to light/dark mode changes, remember to configure their “Dark”/“Light” appearance variant on your end
/// (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
/// <ul>
///   <li>
///     <em>Defaults</em>:
///   </li>
/// </ul>
/// If not set explicitly, the values are filled with Qualtrics Default Theme.
SWIFT_CLASS("_TtC9Qualtrics16YesNoButtonTheme")
@interface YesNoButtonTheme : NSObject
/// <ul>
///   <li>
///     <em>Defaults:</em>
///     If not set explicitly, the values are filled with Qualtrics Default Theme (<em>currently <code>Light mode</code> only</em>).
///   </li>
/// </ul>
/// <hr/>
/// <ul>
///   <li>
///     <em>Dark Mode Support</em>:
///     To make colors respond to light/dark mode changes, remember to configure their <code>Dark</code>/<code>Light</code> appearance variant on your end
///     (<a href="https://developer.apple.com/documentation/uikit/appearance_customization/supporting_dark_mode_in_your_interface#2993897">see more</a>)
///   </li>
/// </ul>
/// <hr/>
/// \param yesButtonTitleColor Yes button text adaptive color
///
/// \param yesButtonFont Yes button text font
///
/// \param yesButtonBackgroundColor Yes button background adaptive color
///
/// \param yesButtonBorderColor Yes button border  adaptive color
///
/// \param noButtonTitleColor No button text adaptive color
///
/// \param noButtonFont No button text font
///
/// \param noButtonBackgroundColor No button background adaptive color
///
/// \param noButtonBorderColor No button border adaptive color
///
/// \param pressedButtonColor Adaptive color of icon in pressed state
///
/// \param pressedButtonBackground Adaptive color of icon background in pressed state
///
- (nonnull instancetype)initWithYesButtonTitleColor:(UIColor * _Nonnull)yesButtonTitleColor yesButtonFont:(UIFont * _Nonnull)yesButtonFont yesButtonBackgroundColor:(UIColor * _Nonnull)yesButtonBackgroundColor yesButtonBorderColor:(UIColor * _Nonnull)yesButtonBorderColor noButtonTitleColor:(UIColor * _Nonnull)noButtonTitleColor noButtonFont:(UIFont * _Nonnull)noButtonFont noButtonBackgroundColor:(UIColor * _Nonnull)noButtonBackgroundColor noButtonBorderColor:(UIColor * _Nonnull)noButtonBorderColor pressedButtonColor:(UIColor * _Nonnull)pressedButtonColor pressedButtonBackground:(UIColor * _Nonnull)pressedButtonBackground OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, targetingResultStatus, open) {
  targetingResultStatusPassed = 0,
  targetingResultStatusFailedLogic = 1,
  targetingResultStatusSampledOut = 2,
  targetingResultStatusMultipleDisplayPrevented = 3,
  targetingResultStatusError = 4,
  targetingResultStatusInactive = 5,
  targetingResultStatusContactFrequencyFailed = 6,
};

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
